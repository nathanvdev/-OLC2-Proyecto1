
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSLESSleftBYDIVIDEDMODULrightUMENOSBY CONSOLE DIVIDED DOT FALSE FLOAT LESS LOG MODUL NUMBER PARA PARC PLUS STRING TRUEstart : instrucciones instrucciones : instrucciones instruccion\n                     | instruccion instruccion : print print : CONSOLE DOT LOG PARA expression PARCexpression : primitivo \n                  | aritmeticaaritmetica : expression PLUS expression\n                  | expression LESS expression\n                  | expression BY expression\n                  | expression DIVIDED expression\n                  | expression MODUL expression\n                  | LESS expression %prec UMENOSprimitivo : NUMBER\n                 | FLOAT\n                 | STRING\n                 | booleanboolean : TRUE\n               | FALSE'
    
_lr_action_items = {'CONSOLE':([0,2,3,4,6,20,],[5,5,-3,-4,-2,-5,]),'$end':([1,2,3,4,6,20,],[0,-1,-3,-4,-2,-5,]),'DOT':([5,],[7,]),'LOG':([7,],[8,]),'PARA':([8,],[9,]),'NUMBER':([9,17,21,22,23,24,25,],[13,13,13,13,13,13,13,]),'FLOAT':([9,17,21,22,23,24,25,],[14,14,14,14,14,14,14,]),'STRING':([9,17,21,22,23,24,25,],[15,15,15,15,15,15,15,]),'LESS':([9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,],[17,22,-6,-7,-14,-15,-16,-17,17,-18,-19,17,17,17,17,17,-13,-8,-9,-10,-11,-12,]),'TRUE':([9,17,21,22,23,24,25,],[18,18,18,18,18,18,18,]),'FALSE':([9,17,21,22,23,24,25,],[19,19,19,19,19,19,19,]),'PARC':([10,11,12,13,14,15,16,18,19,26,27,28,29,30,31,],[20,-6,-7,-14,-15,-16,-17,-18,-19,-13,-8,-9,-10,-11,-12,]),'PLUS':([10,11,12,13,14,15,16,18,19,26,27,28,29,30,31,],[21,-6,-7,-14,-15,-16,-17,-18,-19,-13,-8,-9,-10,-11,-12,]),'BY':([10,11,12,13,14,15,16,18,19,26,27,28,29,30,31,],[23,-6,-7,-14,-15,-16,-17,-18,-19,-13,23,23,-10,-11,-12,]),'DIVIDED':([10,11,12,13,14,15,16,18,19,26,27,28,29,30,31,],[24,-6,-7,-14,-15,-16,-17,-18,-19,-13,24,24,-10,-11,-12,]),'MODUL':([10,11,12,13,14,15,16,18,19,26,27,28,29,30,31,],[25,-6,-7,-14,-15,-16,-17,-18,-19,-13,25,25,-10,-11,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,6,]),'print':([0,2,],[4,4,]),'expression':([9,17,21,22,23,24,25,],[10,26,27,28,29,30,31,]),'primitivo':([9,17,21,22,23,24,25,],[11,11,11,11,11,11,11,]),'aritmetica':([9,17,21,22,23,24,25,],[12,12,12,12,12,12,12,]),'boolean':([9,17,21,22,23,24,25,],[16,16,16,16,16,16,16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> instrucciones','start',1,'p_start','grammar.py',90),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones','grammar.py',97),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones','grammar.py',98),
  ('instruccion -> print','instruccion',1,'p_instruccion','grammar.py',107),
  ('print -> CONSOLE DOT LOG PARA expression PARC','print',6,'p_print','grammar.py',112),
  ('expression -> primitivo','expression',1,'p_expression','grammar.py',118),
  ('expression -> aritmetica','expression',1,'p_expression','grammar.py',119),
  ('aritmetica -> expression PLUS expression','aritmetica',3,'p_aritmetica','grammar.py',124),
  ('aritmetica -> expression LESS expression','aritmetica',3,'p_aritmetica','grammar.py',125),
  ('aritmetica -> expression BY expression','aritmetica',3,'p_aritmetica','grammar.py',126),
  ('aritmetica -> expression DIVIDED expression','aritmetica',3,'p_aritmetica','grammar.py',127),
  ('aritmetica -> expression MODUL expression','aritmetica',3,'p_aritmetica','grammar.py',128),
  ('aritmetica -> LESS expression','aritmetica',2,'p_aritmetica','grammar.py',129),
  ('primitivo -> NUMBER','primitivo',1,'p_primitivo','grammar.py',149),
  ('primitivo -> FLOAT','primitivo',1,'p_primitivo','grammar.py',150),
  ('primitivo -> STRING','primitivo',1,'p_primitivo','grammar.py',151),
  ('primitivo -> boolean','primitivo',1,'p_primitivo','grammar.py',152),
  ('boolean -> TRUE','boolean',1,'p_boolean','grammar.py',169),
  ('boolean -> FALSE','boolean',1,'p_boolean','grammar.py',170),
]
